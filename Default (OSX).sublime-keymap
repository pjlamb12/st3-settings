[
	{ "keys": ["super+shift+down"], "command": "duplicate_line" },
	{ "keys": ["alt+d"], "command": "goto_definition" },
	{ "keys": ["super+shift+up"], "command": "duplicate_line" },
	{ "keys": ["ctrl+d"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Line.sublime-macro"} },
	{ "keys": ["super+v"], "command": "paste_and_indent" },
	{ "keys": ["super+shift+v"], "command": "paste" },
	{ "keys": ["super+alt+i"], "command": "use_it" },
	{"keys": ["super+ctrl+/"], "command": "find_keymap"},
	{ "keys": ["option+up"], "command": "select_lines", "args": {"forward": false} },
	{ "keys": ["option+down"], "command": "select_lines", "args": {"forward": true} },
	{ "keys": ["super+shift+r"], "command": "reindent"},
	{ "keys": ["super+;"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/function-semicolon.sublime-macro"} },
	{ "keys": ["super+,"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/function-comma.sublime-macro"} },
	{ "keys": ["ctrl+b"], "command": "toggle_bookmark" },
	{ "keys": ["ctrl+super+b"], "command": "clear_bookmarks" },
	{ "keys": ["super+b"], "command": "next_bookmark" },
	{ "keys": ["super+shift+b"], "command": "prev_bookmark" },
	{ "keys": ["super+shift+r"],  "command": "reindent" },
	{ "keys": ["super+shift+a"], "command": "expand_selection", "args": {"to": "tag"} },
	{ "keys": ["super+t"], "command": "new_file" },
	{ "keys": ["ctrl+i"], "command": "indent_and_braces", "args": { "from_cursor": true} },
	{ "keys": ["ctrl+j"], "command": "indent_and_braces", "args": { "from_cursor": false} },
	{ "keys": ["option+'"], "command": "change_quotes" },
	{ "keys": ["super+alt+p"], "command": "autoprefixer" },
	{ "keys": ["super+k", "super+t"], "command": "title_case" },
	{ "keys": ["super+'"], "command": "select_quoted" },
	{ "keys": ["ctrl+4"], "command": "run_macro_file", "args": { "file": "res://Packages/User/macros/to-4.sublime-macro" }},
	{
	  "keys": ["tab"],
	  "command": "expand_abbreviation_by_tab",

	  // put comma-separated syntax selectors for which
	  // you want to expandEmmet abbreviations into "operand" key
	  // instead of SCOPE_SELECTOR.
	  // Examples: source.js, text.html - source
	  "context": [
	    {
	      "operand": "meta.group.braces.round.js, text.html",
	      "operator": "equal",
	      "match_all": true,
	      "key": "selector"
	    },

	    // run only if there's no selected text
	    {
	      "match_all": true,
	      "key": "selection_empty"
	    },

	    // don't work if there are active tabstops
	    {
	      "operator": "equal",
	      "operand": false,
	      "match_all": true,
	      "key": "has_next_field"
	    },

	    // don't work if completion popup is visible and you
	    // want to insert completion with Tab. If you want to
	    // expand Emmet with Tab even if popup is visible --
	    // remove this section
	    {
	      "operand": false,
	      "operator": "equal",
	      "match_all": true,
	      "key": "auto_complete_visible"
	    },
	    {
	      "match_all": true,
	      "key": "is_abbreviation"
	    }
	  ]
	}

]
